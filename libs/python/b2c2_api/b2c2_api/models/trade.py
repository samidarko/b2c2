# coding: utf-8

"""
    Swagger b2c2

    B2C2 REST API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from b2c2_api.configuration import Configuration


class Trade(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instrument': 'str',
        'trade_id': 'str',
        'origin': 'str',
        'created': 'str',
        'price': 'str',
        'quantity': 'str',
        'order': 'str',
        'side': 'str',
        'executing_unit': 'str'
    }

    attribute_map = {
        'instrument': 'instrument',
        'trade_id': 'trade_id',
        'origin': 'origin',
        'created': 'created',
        'price': 'price',
        'quantity': 'quantity',
        'order': 'order',
        'side': 'side',
        'executing_unit': 'executing_unit'
    }

    def __init__(self, instrument=None, trade_id=None, origin=None, created=None, price=None, quantity=None, order=None, side=None, executing_unit=None, local_vars_configuration=None):  # noqa: E501
        """Trade - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._instrument = None
        self._trade_id = None
        self._origin = None
        self._created = None
        self._price = None
        self._quantity = None
        self._order = None
        self._side = None
        self._executing_unit = None
        self.discriminator = None

        if instrument is not None:
            self.instrument = instrument
        if trade_id is not None:
            self.trade_id = trade_id
        if origin is not None:
            self.origin = origin
        if created is not None:
            self.created = created
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if order is not None:
            self.order = order
        if side is not None:
            self.side = side
        if executing_unit is not None:
            self.executing_unit = executing_unit

    @property
    def instrument(self):
        """Gets the instrument of this Trade.  # noqa: E501


        :return: The instrument of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Trade.


        :param instrument: The instrument of this Trade.  # noqa: E501
        :type instrument: str
        """

        self._instrument = instrument

    @property
    def trade_id(self):
        """Gets the trade_id of this Trade.  # noqa: E501


        :return: The trade_id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this Trade.


        :param trade_id: The trade_id of this Trade.  # noqa: E501
        :type trade_id: str
        """

        self._trade_id = trade_id

    @property
    def origin(self):
        """Gets the origin of this Trade.  # noqa: E501


        :return: The origin of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Trade.


        :param origin: The origin of this Trade.  # noqa: E501
        :type origin: str
        """

        self._origin = origin

    @property
    def created(self):
        """Gets the created of this Trade.  # noqa: E501


        :return: The created of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Trade.


        :param created: The created of this Trade.  # noqa: E501
        :type created: str
        """

        self._created = created

    @property
    def price(self):
        """Gets the price of this Trade.  # noqa: E501


        :return: The price of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trade.


        :param price: The price of this Trade.  # noqa: E501
        :type price: str
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Trade.  # noqa: E501


        :return: The quantity of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Trade.


        :param quantity: The quantity of this Trade.  # noqa: E501
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def order(self):
        """Gets the order of this Trade.  # noqa: E501


        :return: The order of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Trade.


        :param order: The order of this Trade.  # noqa: E501
        :type order: str
        """

        self._order = order

    @property
    def side(self):
        """Gets the side of this Trade.  # noqa: E501


        :return: The side of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this Trade.


        :param side: The side of this Trade.  # noqa: E501
        :type side: str
        """

        self._side = side

    @property
    def executing_unit(self):
        """Gets the executing_unit of this Trade.  # noqa: E501


        :return: The executing_unit of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._executing_unit

    @executing_unit.setter
    def executing_unit(self, executing_unit):
        """Sets the executing_unit of this Trade.


        :param executing_unit: The executing_unit of this Trade.  # noqa: E501
        :type executing_unit: str
        """

        self._executing_unit = executing_unit

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Trade):
            return True

        return self.to_dict() != other.to_dict()
