/* tslint:disable */
/* eslint-disable */
/**
 * Swagger b2c2
 * B2C2 REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Instrument
 */
export interface Instrument {
    /**
     * 
     * @type {string}
     * @memberof Instrument
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'valid_until'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'rfq_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'client_rfq_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'quantity'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'side'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'instrument'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'price'?: string;
    /**
     * 
     * @type {string}
     * @memberof Quote
     */
    'created'?: string;
}
/**
 * 
 * @export
 * @interface QuoteRequest
 */
export interface QuoteRequest {
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    'instrument'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    'side'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    'quantity'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    'client_rfq_id'?: string;
}

/**
 * B2c2Api - axios parameter creator
 * @export
 */
export const B2c2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all your tradable instruments. Please ask your sales representative if you want access to more instruments.
         * @summary Get Tradable Instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2c2InstrumentsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/instruments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary API endpoint to send Request for Quotes.
         * @param {QuoteRequest} quoteRequest Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2c2RequestForQuotePost: async (quoteRequest: QuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteRequest' is not null or undefined
            assertParamExists('b2c2RequestForQuotePost', 'quoteRequest', quoteRequest)
            const localVarPath = `/request_for_quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * B2c2Api - functional programming interface
 * @export
 */
export const B2c2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = B2c2ApiAxiosParamCreator(configuration)
    return {
        /**
         * List all your tradable instruments. Please ask your sales representative if you want access to more instruments.
         * @summary Get Tradable Instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2c2InstrumentsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Instrument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2c2InstrumentsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary API endpoint to send Request for Quotes.
         * @param {QuoteRequest} quoteRequest Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2c2RequestForQuotePost(quoteRequest: QuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Quote>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2c2RequestForQuotePost(quoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * B2c2Api - factory interface
 * @export
 */
export const B2c2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = B2c2ApiFp(configuration)
    return {
        /**
         * List all your tradable instruments. Please ask your sales representative if you want access to more instruments.
         * @summary Get Tradable Instruments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2c2InstrumentsGet(options?: any): AxiosPromise<Array<Instrument>> {
            return localVarFp.b2c2InstrumentsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary API endpoint to send Request for Quotes.
         * @param {QuoteRequest} quoteRequest Pet object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2c2RequestForQuotePost(quoteRequest: QuoteRequest, options?: any): AxiosPromise<Array<Quote>> {
            return localVarFp.b2c2RequestForQuotePost(quoteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * B2c2Api - object-oriented interface
 * @export
 * @class B2c2Api
 * @extends {BaseAPI}
 */
export class B2c2Api extends BaseAPI {
    /**
     * List all your tradable instruments. Please ask your sales representative if you want access to more instruments.
     * @summary Get Tradable Instruments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2c2Api
     */
    public b2c2InstrumentsGet(options?: AxiosRequestConfig) {
        return B2c2ApiFp(this.configuration).b2c2InstrumentsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary API endpoint to send Request for Quotes.
     * @param {QuoteRequest} quoteRequest Pet object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2c2Api
     */
    public b2c2RequestForQuotePost(quoteRequest: QuoteRequest, options?: AxiosRequestConfig) {
        return B2c2ApiFp(this.configuration).b2c2RequestForQuotePost(quoteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


